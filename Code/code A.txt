#include<linux/semaphore.h>
#include<linux/kthread.h>
#include<linux/delay.h>
#include<linux/unistd.h>
#include<linux/module.h>
#include<linux/init.h>

struct semaphore agent_m, smoker_items[3] , pusher_sem[3] , pusher_lock;
char * smoker_types[3] = {"matches and tobacco" , "matches and paper" , "tobacco and paper"};
bool table[3] = {false,false,false};
int i=0;


void* agent (void* arg) {
int id = (int) arg;
int i=0;
for(i=0;i<3;i++) {
   
    msleep(2);
    down(&agent_m);
   
    up(&pusher_sem[id]);
    up(&pusher_sem[(id+1) % 3]);
   
    printk("Agent giving out %s", smoker_types[(id + 2) % 3 ] );
 
 }
 return 0;
}



void* pusher (void* arg) {
   int id = (int) arg;
   int i=0;
   for(i=0;i<6;i++) {
       
       down(&pusher_sem[id]);
       down(&pusher_lock);
       
       if (table[(id+1) % 3] ) {
          table[(id+1) %3 ] = false;
          up(&smoker_items[(id+2) % 3 ]);
       }
       else if (table[ (id+2) %3]) {
          table[(id+2) % 3 ] = false;
          up(&smoker_items [(id+1)%3 ]);  
       }
       else {
         table[id] = true;  
       }
       
       up(&pusher_lock);
   }
   return 0;
}


void smoker (void arg) {
 int id = (int)arg;
 int type = id % 3;
 int i=0;
 for(i=0;i<3;i++) {
 
     printk("Smoker %d waiting for %s ",id,smoker_types[type]);
     down(&smoker_items[type]);
     printk("Smoker %d now making a cigratte\n" , id);
     msleep(5);
     up(&agent_m);
     printk(" Smoker %d now smoking " , id);
     msleep(5);
   
 }
 return 0;
}


asmlinkage long sys_chainsmokers(void) {

int smoker_id[3],pusher_id[3],agent_id[3];

struct task_struct *smoker_thread[3] , *pusher_thread[3] , *agent_thread[3];

sema_init(&agent_m ,1);
sema_init(&pusher_lock ,1);

for(i=0;i<3;i++) {
   sema_init(&smoker_items[i],0);
   sema_init(&pusher_sem[i],0);
}

for(i=0;i<3;i++) {

smoker_id[i] = i;
pusher_id[i] = i;
agent_id[i] = i;

smoker_thread[i] = kthread_run((void*)smoker, &smoker_id[i],"SMOKER");
pusher_thread[i] = kthread_run((void*)pusher, &pusher_id[i],"PUSHER");
agent_thread[i] = kthread_run((void*)agent, &agent_id[i],"AGENT");
}

return 0;
}